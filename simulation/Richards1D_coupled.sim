/*
 * Solver for Richards' equation 1D
 *   water pressure initial condition is assigned by the user
 *   boundary conditions assigned by the user
 *   
 * 	 Numerical scheme: 
 * 	 	Casulli, Vincenzo, and Paola Zanolli. 
 * 	 	"A nested Newton-type algorithm for finite volume methods solving Richards' equation in mixed form." 
 * 	 	SIAM Journal on Scientific Computing 32.4 (2010): 2255-2273.
 */
import static oms3.SimBuilder.instance as OMS3
import static oms3.SimBuilder.*
def home = oms_prj

// start and end date of the simulation

def startDate= "2018-03-05 00:00"


def endDate="2018-03-07 00:00"

// time interval of temporal series [minutes]
def tTimestep = 5 


solver = OMS3.sim(name: "Integrate PDE", {

resource "$oms_prj/lib"
    
    //model() {
    model(while : "reader_data_topBC.doProcess"  ){
    	
        components {
        	
           // reads of the grid.nc file
           "readNetCDF" "monodimensionalProblemTimeDependent.ReadNetCDFRichardsGrid1D"
          
           // solve Richards' equation
           "solver" "Richards1DSolver.Richards1DSolver"
           
           // readers of boundary condition time-series
           "reader_data_topBC"    "org.jgrasstools.gears.io.timedependent.OmsTimeSeriesIteratorReader"
           "reader_data_bottomBC" "org.jgrasstools.gears.io.timedependent.OmsTimeSeriesIteratorReader"
         
           // this component stores solver's output during the simulation
           "buffer" "bufferWriter.Buffer1D"
       
       	   // output writer in a NetCDF format
           "writeNetCDF" "monodimensionalProblemTimeDependent.WriteNetCDFRichards1D"
           
        }
        
        parameter {
        
          // File path of grid.nc file, the file created with RichardsMeshGen.ipynb	
          "readNetCDF.richardsGridFilename" "$oms_prj//data/Grid_NetCDF/1_ref.nc"
         
          // Available SWRC models:
          // - "Van Genuchten"
          // - "Kosugi"
          // - "Brooks Corey"
          // - "Romano"
          "solver.soilHydraulicModel" "Van Genuchten"
          
          // Angle [degree] with the vertical direction
		  // - 0 the soil column is aligned with the vertical direction
		  // - 90 the soil column is horizontal
		  "solver.delta" "0"
		  
          // Type of the top boundary condition:
          // - "Top Neumann" the water flux through the soil surface is assigned
          "solver.topBCType"  "Top Neumann";
		  
		  // Type of the bottom boundary condition:
          // - "Bottom Dirichlet" the water pressure value is assigned
          // - "Bottom Free Drainage" the water flux is controlled only
          //                          by the gravitational gradient 
          // - "Bottom Impervious" there is no water flux through the 
          //						domain bottom
          // - "Bottom Neumann" you prescribe the water flux through the 
          //						domain bottom (positive: inflow, negative: outflow)
		  "solver.bottomBCType"  "Bottom free drainage"
		  
		  // Interface hydraulic conductivity can be computed as:
          // - "mean" arithmetic average between i and i+1 (suggested)
          // - "max" maximum between i and i+1 (suggested)
          // - "min" minimum between i and i+1 (not suggested)
          // - "weighted average" average between i and i+1, weights are control volumes lengths
		  "solver.interfaceHydraulicCondType" "mean"
          
          // nested Newton tolerance, range(10^(-3) ;  10^(-14))
          "solver.newtonTolerance" "0.00000000001"
          
          // Algorithm to solve the nonlinear system:
          // - 0 --> Newton's method
          // - 1 --> nested Newton (suggested)
          "solver.nestedNewton" "1"
          
          // time step [s], it must be consistent
          // with tTimestep defined at line 22
          "solver.tTimestep" tTimestep*60
		  
		  // time step used to integrate the equation,
		  // this is the Delta t used in the numerical scheme
		  "solver.timeDelta" "300"
		  
          // parameters reader data input top boundary condition
          "reader_data_topBC.file"             "$oms_prj//data/Timeseries/Rain50mmh.csv"
          "reader_data_topBC.idfield"          "ID"  
          "reader_data_topBC.tStart"           "${startDate}"
          "reader_data_topBC.tEnd"             "${endDate}"
          "reader_data_topBC.tTimestep"        "${tTimestep}"
          "reader_data_topBC.fileNovalue"      "-9999"
          
          // parameters reader data input bottom boundary condition
          "reader_data_bottomBC.file"             "$oms_prj//data/Timeseries/All_0.csv"
          "reader_data_bottomBC.idfield"          "ID"  
          "reader_data_bottomBC.tStart"           "${startDate}"
          "reader_data_bottomBC.tEnd"             "${endDate}"
          "reader_data_bottomBC.tTimestep"        "${tTimestep}"
          "reader_data_bottomBC.fileNovalue"      "-9999"
          	           
          // folder path for the output files
          "writeNetCDF.fileName" "$oms_prj//output/Output_1_ref.nc"
          
          // here you can enter a string to describe your simulation
          "writeNetCDF.briefDescritpion" "grid 1_ref.nc, rain: 50mm/h, free drainage, integration time step 300s, interface hydraulic conductivity: mean "
          
        }
        
        connect{


          "readNetCDF.z"            "solver.z"
          "readNetCDF.spaceDelta"   "solver.spaceDeltaZ"
          "readNetCDF.psiIC"        "solver.psiIC"
          "readNetCDF.deltaZ"       "solver.deltaZ"
          "readNetCDF.Ks"           "solver.ks"
          "readNetCDF.thetaS"       "solver.thetaS"
          "readNetCDF.thetaR"       "solver.thetaR"
          "readNetCDF.par1SWRC"     "solver.par1SWRC"
          "readNetCDF.par2SWRC"     "solver.par2SWRC"
          "readNetCDF.par3SWRC"     "solver.par3SWRC"
          "readNetCDF.par4SWRC"     "solver.par4SWRC"
          "readNetCDF.par5SWRC"     "solver.par5SWRC"
          "readNetCDF.par6SWRC"     "solver.psiStar1"
          "readNetCDF.par7SWRC"     "solver.psiStar2"
          "readNetCDF.par8SWRC"     "solver.psiStar3"
          "readNetCDF.alphaSS"      "solver.alphaSpecificStorage"
          "readNetCDF.betaSS"      "solver.betaSpecificStorage"
          "readNetCDF.et"           "solver.et"
          
           
          
          "reader_data_topBC.outData" "solver.inTopBC"
          
          "reader_data_bottomBC.outData" "solver.inBottomBC"
          
          "reader_data_topBC.tCurrent" "solver.inCurrentDate"
          
          
          
          
          "solver.outputToBuffer" "buffer.inputVariable"
          
          "readNetCDF.eta" "buffer.inputSpatialCoordinate"
          
          "readNetCDF.etaDual" "buffer.inputDualSpatialCoordinate"
          
          "solver.inCurrentDate" "buffer.inputDate"
          
          
          
          
          "buffer.myVariable" "writeNetCDF.myVariables"
          
          "buffer.mySpatialCoordinate" "writeNetCDF.mySpatialCoordinate"
          
          "buffer.myDualSpatialCoordinate" "writeNetCDF.myDualSpatialCoordinate"
          
          "reader_data_topBC.doProcess" "writeNetCDF.doProcess"
        }
    }
    
    
    
}

)
