/*
 * Solver for Richards' equation 1D
 *   water pressure initial condition is assigned by the user
 *   boundary conditions assigned by the user
 *   
 * 	 Numerical scheme: 
 * 	 	Casulli, Vincenzo, and Paola Zanolli. 
 * 	 	"A nested Newton-type algorithm for finite volume methods solving Richards' equation in mixed form." 
 * 	 	SIAM Journal on Scientific Computing 32.4 (2010): 2255-2273.
 */
import static oms3.SimBuilder.instance as OMS3
import static oms3.SimBuilder.*
def home = oms_prj

// start and end date of the simulation

def startDate= "2017-01-01 00:00"


def endDate="2017-01-28 00:00"

// time interval of temporal series [minutes]
def tTimestep = 5 


solver = OMS3.sim(name: "Integrate PDE", {

resource "$oms_prj/lib"

	model(while : "reader_data_topBC.doProcess"  ){

		components {
			
			// reads of the grid.nc file
			"readNetCDF" "monodimensionalProblemTimeDependent.ReadNetCDFRichardsGrid1D"
			
			// solve Richards' equation
			"solver" "Richards1DSolver.CallRichardsSolver"
			
			// readers of boundary condition time-series
			"reader_data_topBC"    "org.jgrasstools.gears.io.timedependent.OmsTimeSeriesIteratorReader"
			"reader_data_bottomBC" "org.jgrasstools.gears.io.timedependent.OmsTimeSeriesIteratorReader"
			
			// this component stores solver's output during the simulation
			"buffer" "bufferWriter.RichardsBuffer1D"
			
			// output writer in a NetCDF format
			"writeNetCDF" "monodimensionalProblemTimeDependent.WriteNetCDFRichards1D"
		
		}
		
		parameter {

			// File path of grid.nc file, the file created with RichardsMeshGen.ipynb	
			"readNetCDF.richardsGridFilename" "$oms_prj//data/Grid_NetCDF/Clay_noPonding_VG.nc"

			// Available SWRC models:
			// - "Van Genuchten"
			// - "Kosugi"
			// - "Brooks Corey"
			// - "Romano"
			// - "Van Genuchten Bachmann"
			// - "Brooks Corey Bachmann"
			"solver.soilHydraulicModel" "Van Genuchten"

			// Available unsaturated hydraulic conductivity models:
			// - "Mualem Van Genuchten"
			// - "Mualem Kosugi"
			// - "Mualem Brooks Corey"
			// - "Mualem Romano"
			"solver.typeUHCModel" "Mualem Van Genuchten"

			// Equation to describe the dependence of water viscosity on temperature
			// is used to correct the value of unsaturated hydraulic conductivity
			// - "notemperature"
			// - "Ronan1998"
			"solver.typeUHCTemperatureModel" "notemperature"
			
			// Soil temperature [K]. It is assumed to be homogeneous and constant
			"solver.T" "293.15"

			// Parameter describing the dependence of water suction on temperature (Bachmann, 2002)
			"solver.beta0" "-766.45" // (do not change)

			// Reference temperature [K] for the dependence of water suction on temperature (Bachmann, 2002)
			"solver.temperatureR" "278.15" // (do not change)

			// Angle [degree] with the vertical direction
			// - 0 the soil column is aligned with the vertical direction
			// - 90 the soil column is horizontal
			"solver.delta" "0"  // (do not change)

			// Type of the top boundary condition:
			// - "Top Neumann" the water flux through the soil surface is assigned
			"solver.topBCType"  "Top Neumann";

			// Type of the bottom boundary condition:
			// - "Bottom Dirichlet" the water pressure value is assigned
			// - "Bottom Free Drainage" the water flux is controlled only
			//                          by the gravitational gradient 
			// - "Bottom Impervious" there is no water flux through the 
			//						domain bottom
			// - "Bottom Neumann" you prescribe the water flux through the 
			//						domain bottom (positive: inflow, negative: outflow)
			"solver.bottomBCType"  "Bottom Neumann"

			// Interface hydraulic conductivity can be computed as:
			// - "mean" arithmetic average between i and i+1 (not suggested)
			// - "max" maximum between i and i+1 (suggested)
			// - "min" minimum between i and i+1 (not suggested)
			// - "weighted average" average between i and i+1, weights are control volumes lengths
			"solver.interfaceHydraulicCondType" "max"

			// nested Newton tolerance, range(10^(-3) ;  10^(-14))
			"solver.newtonTolerance" "0.00000000001"

			// Algorithm to solve the nonlinear system:
			// - 0 --> Newton's method
			// - 1 --> nested Newton (suggested)
			"solver.nestedNewton" "1"

			// time step [s], it must be consistent
			// with tTimestep defined at line 22
			"solver.tTimestep" tTimestep*60

			// time step [s] used to integrate the equation,
			// this is the Delta t used in the numerical scheme
			// timeDelta <= tTimestep
			"solver.timeDelta" "300"

			// parameters reader data input top boundary condition
			"reader_data_topBC.file"             "$oms_prj//data/Timeseries/TestAll_0.csv"
			"reader_data_topBC.idfield"          "ID"  
			"reader_data_topBC.tStart"           "${startDate}"
			"reader_data_topBC.tEnd"             "${endDate}"
			"reader_data_topBC.tTimestep"        "${tTimestep}"
			"reader_data_topBC.fileNovalue"      "-9999"

			// parameters reader data input bottom boundary condition
			"reader_data_bottomBC.file"             "$oms_prj//data/Timeseries/TestAll_0.csv"
			"reader_data_bottomBC.idfield"          "ID"  
			"reader_data_bottomBC.tStart"           "${startDate}"
			"reader_data_bottomBC.tEnd"             "${endDate}"
			"reader_data_bottomBC.tTimestep"        "${tTimestep}"
			"reader_data_bottomBC.fileNovalue"      "-9999"

			// folder path for the output files
			"writeNetCDF.fileName" "$oms_prj//output/Clay_noPonding_VG.nc"
			// here you can enter a string to describe your simulation
			"writeNetCDF.briefDescritpion" "grid:  data/Grid_NetCDF/Clay_noPonding_VG.nc; topBC TestAll_0.csv, bottomBC Neumann TestAll_0, deltaT 300s"

		}

		connect{


			"readNetCDF.z"            "solver.z"
			"readNetCDF.spaceDelta"   "solver.spaceDeltaZ"
			"readNetCDF.psiIC"        "solver.psiIC"
			"readNetCDF.deltaZ"       "solver.deltaZ"
			"readNetCDF.Ks"           "solver.ks"
			"readNetCDF.thetaS"       "solver.thetaS"
			"readNetCDF.thetaR"       "solver.thetaR"
			"readNetCDF.par1SWRC"     "solver.par1SWRC"
			"readNetCDF.par2SWRC"     "solver.par2SWRC"
			"readNetCDF.par3SWRC"     "solver.par3SWRC"
			"readNetCDF.par4SWRC"     "solver.par4SWRC"
			"readNetCDF.par5SWRC"     "solver.par5SWRC"
			"readNetCDF.par6SWRC"     "solver.psiStar1"
			"readNetCDF.par7SWRC"     "solver.psiStar2"
			"readNetCDF.par8SWRC"     "solver.psiStar3"
			"readNetCDF.alphaSS"      "solver.alphaSpecificStorage"
			"readNetCDF.betaSS"      "solver.betaSpecificStorage"
			"readNetCDF.et"           "solver.et"
			
			
			
			"reader_data_topBC.outData" "solver.inTopBC"
			
			"reader_data_bottomBC.outData" "solver.inBottomBC"
			
			"reader_data_topBC.tCurrent" "solver.inCurrentDate"
			
			
			
			
			"solver.outputToBuffer" "buffer.inputVariable"
			
			"readNetCDF.eta" "buffer.inputSpatialCoordinate"
			
			"readNetCDF.etaDual" "buffer.inputDualSpatialCoordinate"
			
			"solver.inCurrentDate" "buffer.inputDate"
			
			
			
			
			"buffer.myVariable" "writeNetCDF.myVariables"
			
			"buffer.mySpatialCoordinate" "writeNetCDF.mySpatialCoordinate"
			
			"buffer.myDualSpatialCoordinate" "writeNetCDF.myDualSpatialCoordinate"
			
			"reader_data_topBC.doProcess" "writeNetCDF.doProcess"
		}
	}

	}

)
